#ifndef {{ filename }}_h
#define {{ filename }}_h

#include <pebble.h>

{% macro item_header(item) %}
{% if 'appKey' in item %}
{% if item['type'] == 'select' or item['type'] == 'radiogroup' %}
{% if item['options'][0]['value'] is string %}
char* get_{{ item|getid|cvarname }}();
{% else %}
typedef enum {
{% for option in item['options']: %}
	{{ item|getid|cvarname|upper }}_{{ option['label']|cvarname|upper }} = {{ option['value'] }},
{% endfor %}
} {{ item|getid|cvarname|upper }}Value;
{{ item|getid|cvarname|upper }}Value get_{{ item|getid|cvarname }}();
{% endif %}
{% elif item['type'] == 'toggle' %}
bool get_{{ item|getid|cvarname }}();
{% elif item['type'] == 'input' %}
const char* get_{{ item|getid|cvarname }}();
{% elif item['type'] == 'color' %}
GColor get_{{ item|getid|cvarname }}();
{% elif item['type'] == 'checkboxgroup' %}
uint16_t get_{{ item|getid|cvarname }}_count();
{% if item['options'][0]['value'] is string %}
const char* get_{{ item|getid|cvarname }}(uint16_t index);
{% else %}
typedef enum {
{% for option in item['options']: %}
	{{ item|getid|cvarname|upper }}_{{ option['label']|cvarname|upper }} = {{ option['value'] }},
{% endfor %}
} {{ item|getid|cvarname|upper }}Value;
{{ item|getid|cvarname|upper }}Value get_{{ item|getid|cvarname }}(uint16_t index);
{% endif %}
{% elif item['type'] == 'slider' %}
{% if 'step' in item and '.' in item['step']|string %}
#define {{ item|getid|cvarname|upper }}_PRECISION {{ 10**((item['step'] - item['step']|round(0, 'floor'))|string|length - 2) }}
{% else %}
#define {{ item|getid|cvarname|upper }}_PRECISION 1
{% endif %}
int32_t get_{{ item|getid|cvarname }}();
{% endif %}
{% endif %}
{% endmacro %}

{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_header(item) }}
{% endfor %}
{% else %}
{{ item_header(item) }}
{% endif %}
{% endfor %}

void {{ filename }}_register_custom_inbox_received(AppMessageInboxReceived received_callback); 

void {{ filename }}_init(const uint32_t size_inbound, const uint32_t size_outbound);

void {{ filename }}_deinit();

#endif