/**
 * This file was generated with Enamel : http://gregoiresage.github.io/enamel
 */

#include <pebble.h>
#include "{{ filename }}.h"

#ifndef {{ filename|upper }}_MAX_STRING_LENGTH
#define {{ filename|upper }}_MAX_STRING_LENGTH 30
#endif

{% macro item_accessors_code(item) %}
{% if 'appKey' in item %}
// -----------------------------------------------------
// Getter for '{{ item|getid }}'
#define {{ item|getid|cvarname|upper }}_PKEY {{ appinfo['appKeys'][item['appKey']] }}
{% if item['type'] == 'toggle' %}
static bool _{{ item|getid|cvarname }};
bool {{ filename }}_get_{{ item|getid|cvarname }}(){
	return _{{ item|getid|cvarname }};
}
static void set_{{ item|getid|cvarname }}(bool value){
	_{{ item|getid|cvarname }} = value;
}
{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
{% if item['options'][0]['value'] is string %}
static uint16_t _{{ item|getid|cvarname }};
static const char* {{ item|getid|cvarname }}_values[] = {
{%- for option in item['options'] -%}
	"{{ option['value'] }}",
{%- endfor -%}
};
const char* {{ filename }}_get_{{ item|getid|cvarname }}(){
	return {{ item|getid|cvarname }}_values[_{{ item|getid|cvarname }}];
}
static void set_{{ item|getid|cvarname }}(char* value){
	for(uint16_t i=0; i<{{ item['options']|length }}; i++){
		if(strcmp(value, {{ item|getid|cvarname }}_values[i]) == 0){
			_{{ item|getid|cvarname }} = i;
			return;
		}
	}
	_{{ item|getid|cvarname }} = 0;
}
{% else %}
{{ item|getid|cvarname|upper }}Value _{{ item|getid|cvarname }};
{{ item|getid|cvarname|upper }}Value {{ filename }}_get_{{ item|getid|cvarname }}(){
	return _{{ item|getid|cvarname }};
}
static void set_{{ item|getid|cvarname }}({{ item|getid|cvarname|upper }}Value value){
	_{{ item|getid|cvarname }} = value;
}
{% endif %}
{% elif item['type'] == 'input' %}
static char* _{{ item|getid|cvarname }}; 
{% if 'attributes' in item and 'type' in item['attributes'] %}
{% if item['attributes']['type'] == 'time' %}
uint16_t {{ filename }}_get_{{ item|getid|cvarname }}(){
	char value_hours[2];
	value_hour[0] = _{{ item|getid|cvarname }}[0];
	value_hour[1] = _{{ item|getid|cvarname }}[1];
	char value_minutes[2];
	value_minutes[0] = _{{ item|getid|cvarname }}[3];
	value_minutes[1] = _{{ item|getid|cvarname }}[4];
	return atoi(value_hour) * 60 + atoi(value_minutes);
}
{% else %}
const char* {{ filename }}_get_{{ item|getid|cvarname }}(){
	return _{{ item|getid|cvarname }};
}
{% endif %}
{% else %}
const char* {{ filename }}_get_{{ item|getid|cvarname }}(){
	return _{{ item|getid|cvarname }};
}
{% endif %}
static void set_{{ item|getid|cvarname }}(char* value){
	if(_{{ item|getid|cvarname }}) free( _{{ item|getid|cvarname }});
	uint32_t size = strlen(value);
	_{{ item|getid|cvarname }} = malloc(size + 1);
	_{{ item|getid|cvarname }}[size] = 0;
	strncpy(_{{ item|getid|cvarname }}, value, size);
}
{% elif item['type'] == 'color' %}
static GColor _{{ item|getid|cvarname }};
GColor {{ filename }}_get_{{ item|getid|cvarname }}(){
	return _{{ item|getid|cvarname }};
}
static void set_{{ item|getid|cvarname }}(uint8_t value){
	_{{ item|getid|cvarname }}.argb = value;
}
{% elif item['type'] == 'slider' %}
static int32_t _{{ item|getid|cvarname }};
int32_t {{ filename }}_get_{{ item|getid|cvarname }}(){
	return _{{ item|getid|cvarname }};
}
static void set_{{ item|getid|cvarname }}(int32_t value){
	_{{ item|getid|cvarname }} = value;
}
{% elif item['type'] == 'checkboxgroup' %}
typedef struct {
  uint16_t count;
{% if item['options'][0]['value'] is string %}
  uint16_t values[{{ item['options']|length }}]; 
{% else %}
  {{ item|getid|cvarname|upper }}Value values[{{ item['options']|length }}];
{% endif %}
} {{ item|getid|cvarname }}Data;
static {{ item|getid|cvarname }}Data _{{ item|getid|cvarname }}_data;
{% if item['options'][0]['value'] is string %}
static const char* {{ item|getid|cvarname }}_values[] = {
{%- for option in item['options'] -%}
	"{{ option['value'] }}",
{%- endfor -%}
};
const char* {{ filename }}_get_{{ item|getid|cvarname }}(uint16_t index_){
	if(index_ < _{{ item|getid|cvarname }}_data.count)
		return {{ item|getid|cvarname }}_values[_{{ item|getid|cvarname }}_data.values[index_]];
	return 0;
}
{% else %}
{{ item|getid|cvarname|upper }}Value {{ filename }}_get_{{ item|getid|cvarname }}(uint16_t index_){
	if(index_ < _{{ item|getid|cvarname }}_data.count)
		return _{{ item|getid|cvarname }}_data.values[index_];
	return 0;
}
{% endif %}
uint16_t {{ filename }}_get_{{ item|getid|cvarname }}_count(){
	return _{{ item|getid|cvarname }}_data.count;
}
static void set_{{ item|getid|cvarname }}(uint8_t* data_, uint16_t length_){
	uint16_t count = 0;
	uint8_t* end = data_ + length_;
	while(data_ < end) {
{% if item['options'][0]['value'] is string %}
		for(uint16_t i=0; i<{{ item['options']|length }}; i++){
			if(strcmp((char*)data_, {{ item|getid|cvarname }}_values[i]) == 0){
				_{{ item|getid|cvarname }}_data.values[count++] = i;
				break;
			}
		} 
{% else %}
		_{{ item|getid|cvarname }}_data.values[count++] = atoi((char*)data_);
{% endif %}
		while (*data_++);
	}
	_{{ item|getid|cvarname }}_data.count = count;
}
{% endif %}
// -----------------------------------------------------

{% endif %}
{%- endmacro -%}

{% for item in config -%}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_accessors_code(item) }}
{%- endfor %}
{% else %}
{{ item_accessors_code(item) }}
{%- endif %}
{% endfor %}

{% macro item_in_received_handler(item) %}
{% if 'appKey' in item %}
	tuple = dict_find(iter, {{ item|getid|cvarname|upper }}_PKEY);
	{% if item['type'] == 'input' %}
	tuple ? set_{{ item|getid|cvarname }}(tuple->value->cstring) : false;
	{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
	{% if item['options'][0]['value'] is string %}
	tuple ? set_{{ item|getid|cvarname }}(tuple->value->cstring) : false;
	{% else %}
	tuple ? set_{{ item|getid|cvarname }}(atoi(tuple->value->cstring)) : false;
	{% endif %}
	{% elif item['type'] == 'color' %}
	tuple ? set_{{ item|getid|cvarname }}(GColorFromHEX(tuple->value->int32).argb) : false;
	{% elif item['type'] == 'toggle' %}
	tuple ? set_{{ item|getid|cvarname }}(tuple->value->int32) : false;
	{% elif item['type'] == 'slider' %}
	tuple ? set_{{ item|getid|cvarname }}(tuple->value->int32) : false;
	{% elif item['type'] == 'checkboxgroup' %}
	tuple ? set_{{ item|getid|cvarname }}(tuple->value->data, tuple->length) : false;
	{% endif %}
{% endif %}
{% endmacro -%}

static AppMessageInboxReceived custom_received_callback; 

static void in_received_handler(DictionaryIterator *iter, void *context) {
	Tuple *tuple = NULL;
{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_in_received_handler(item) }}
{%- endfor %}
{% else %}
{{ item_in_received_handler(item) }}
{%- endif %}
{% endfor %}
	if(custom_received_callback) {
		custom_received_callback(iter, context);
	}
}

{% macro item_init(item) %}
{% if 'appKey' in item %}
	if (persist_exists({{ item|getid|cvarname|upper }}_PKEY)) {
		{% if item['type'] == 'input' %}
		char tmp[{{ filename|upper }}_MAX_STRING_LENGTH];
		memset(tmp, 0, {{ filename|upper }}_MAX_STRING_LENGTH);
		persist_read_string({{ item|getid|cvarname|upper }}_PKEY, tmp, {{ filename|upper }}_MAX_STRING_LENGTH);
		set_{{ item|getid|cvarname }}(tmp);
		{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
		{% if item['options'][0]['value'] is string %}
		_{{ item|getid|cvarname }} = (uint16_t)persist_read_int({{ item|getid|cvarname|upper }}_PKEY);
		{% else %}
		set_{{ item|getid|cvarname }}(persist_read_int({{ item|getid|cvarname|upper }}_PKEY));
		{% endif %}
		{% elif item['type'] == 'color' %}
		set_{{ item|getid|cvarname }}(persist_read_int({{ item|getid|cvarname|upper }}_PKEY));
		{% elif item['type'] == 'slider' %}
		set_{{ item|getid|cvarname }}(persist_read_int({{ item|getid|cvarname|upper }}_PKEY));
		{% elif item['type'] == 'toggle' %}
		set_{{ item|getid|cvarname }}(persist_read_bool({{ item|getid|cvarname|upper }}_PKEY));
		{% elif item['type'] == 'checkboxgroup' %}
		persist_read_data({{ item|getid|cvarname|upper }}_PKEY, &_{{ item|getid|cvarname }}_data, sizeof({{ item|getid|cvarname }}Data));
		{% endif %}
	}
	{% if 'defaultValue' in item %}
	else {
		{% if item['type'] == 'input' %}
		set_{{ item|getid|cvarname }}("{{item['defaultValue']}}");
		{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
		{% if item['options'][0]['value'] is string %}
		set_{{ item|getid|cvarname }}("{{item['defaultValue']}}");
		{% else %}
		set_{{ item|getid|cvarname }}({{item['defaultValue']}});
		{% endif %}
		{% elif item['type'] == 'color' %}
		{% if item['defaultValue'] is string %}
		set_{{ item|getid|cvarname }}(GColorFromHEX(0x{{item['defaultValue']}}).argb);
		{% else %}
		set_{{ item|getid|cvarname }}(GColorFromHEX({{item['defaultValue']}}).argb);
		{% endif %}
		{% elif item['type'] == 'slider' %}
		{% if 'step' in item and '.' in item['step']|string %}
		set_{{ item|getid|cvarname }}({{ (item['defaultValue'] * 10**((item['step'] - item['step']|round(0, 'floor'))|string|length - 2))|int }});
		{% else %}
		set_{{ item|getid|cvarname }}({{item['defaultValue']|lower}});
		{% endif %}
		{% elif item['type'] == 'toggle' %}
		set_{{ item|getid|cvarname }}({{item['defaultValue']|lower}});
		{% elif item['type'] == 'checkboxgroup' %}
		uint8_t array[] = {{item|defaulttobytearray}};
		set_{{ item|getid|cvarname }}(array, sizeof(array));
		{% endif %}
	}
	{% endif %}
{% endif %}
{% endmacro -%}

{% macro item_dict_size(item) %}
{% if item['type'] == 'input' %}
+ 7 + {{ filename|upper }}_MAX_STRING_LENGTH
{% elif item['type'] == 'select' or item['type'] == 'radiogroup' or item['type'] == 'checkboxgroup' %}
+ 7 + {{ item|maxdictsize }}
{% elif item['type'] == 'color' or item['type'] == 'toggle' or item['type'] == 'slider' %}
+ 7 + 4
{% endif %}
{% endmacro -%}

void {{ filename }}_init(const uint32_t size_inbound, const uint32_t size_outbound){
	custom_received_callback = NULL;
	app_message_register_inbox_received(in_received_handler);

	if(size_inbound == 0) {
		app_message_open( 1
		{% for item in config %}
		{% if item['type'] == 'section' %}
		{% for item in item['items'] %}
			{{ item_dict_size(item) }}
		{%- endfor %}
		{% else %}
			{{ item_dict_size(item) }}
		{%- endif %}
		{% endfor %}
		, size_outbound);
	}
	else {
		app_message_open(size_inbound, size_outbound);
	}
	
{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_init(item) }}
{%- endfor %}
{% else %}
{{ item_init(item) }}
{%- endif %}
{% endfor %}
}

{% macro item_deinit(item) %}
{% if 'appKey' in item %}
	{% if item['type'] == 'input' %}
	persist_write_string({{ item|getid|cvarname|upper }}_PKEY, _{{ item|getid|cvarname }});
	if(_{{ item|getid|cvarname }}) free(_{{ item|getid|cvarname }});
	{% elif item['type'] == 'select' or item['type'] == 'radiogroup' %}
	{% if item['options'][0]['value'] is string %}
	persist_read_int({{ item|getid|cvarname|upper }}_PKEY) != (int32_t)_{{ item|getid|cvarname }} ? persist_write_int({{ item|getid|cvarname|upper }}_PKEY, _{{ item|getid|cvarname }}) : false;
	{% else %}
	persist_read_int({{ item|getid|cvarname|upper }}_PKEY) != _{{ item|getid|cvarname }} ? persist_write_int({{ item|getid|cvarname|upper }}_PKEY, _{{ item|getid|cvarname }}) : false;
	{% endif %}
	{% elif item['type'] == 'toggle' %}
	persist_read_bool({{ item|getid|cvarname|upper }}_PKEY) != _{{ item|getid|cvarname }} ? persist_write_bool({{ item|getid|cvarname|upper }}_PKEY, _{{ item|getid|cvarname }}) : false;
	{% elif item['type'] == 'color' %}
	persist_read_int({{ item|getid|cvarname|upper }}_PKEY) != _{{ item|getid|cvarname }}.argb ? persist_write_int({{ item|getid|cvarname|upper }}_PKEY, _{{ item|getid|cvarname }}.argb) : false;
	{% elif item['type'] == 'slider' %}
	persist_read_int({{ item|getid|cvarname|upper }}_PKEY) != _{{ item|getid|cvarname }} ? persist_write_int({{ item|getid|cvarname|upper }}_PKEY, _{{ item|getid|cvarname }}) : false;
	{% elif item['type'] == 'checkboxgroup' %}
	persist_write_data({{ item|getid|cvarname|upper }}_PKEY, &_{{ item|getid|cvarname }}_data, sizeof({{ item|getid|cvarname }}Data));
	{% endif %}
{% endif %}
{% endmacro -%}

void {{ filename }}_deinit(){
{% for item in config %}
{% if item['type'] == 'section' %}
{% for item in item['items'] %}
{{ item_deinit(item) }}
{%- endfor %}
{% else %}
{{ item_deinit(item) }}
{%- endif %}
{% endfor %}
	app_message_deregister_callbacks();
	custom_received_callback = NULL;
}

void {{ filename }}_register_custom_inbox_received(AppMessageInboxReceived received_callback) {
	custom_received_callback = received_callback;
}
